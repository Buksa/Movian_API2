# API Modules Documentation

## Модуль `popup`

### 1. **`webpopup`**
   - **Описание**: Открывает всплывающее окно с веб-страницей и получает результат (например, URL, если страница была перехвачена).
   - **Аргументы**:
     - `url` (строка): URL страницы для открытия в всплывающем окне.
     - `title` (строка): Заголовок окна.
     - `trap` (строка): Условие перехвата для всплывающего окна.
   - **Возвращаемое значение**: Объект с результатом (`result`, `trappedUrl`, `args`).
   - **Пример подключения и использования**:
     ```js
     var popup = require('native/popup');

     popup.webpopup('https://example.com', 'Example Popup', 'trapCondition', function(err, result) {
       if (err) {
         console.error('Ошибка при открытии всплывающего окна:', err);
       } else {
         console.log('Результат всплывающего окна:', result);
       }
     });
     ```

### 2. **`getAuthCredentials`**
   - **Описание**: Получает учетные данные пользователя из хранилища (например, из `keyring`).
   - **Аргументы**:
     - `source` (строка): Источник запроса.
     - `reason` (строка): Причина запроса учетных данных.
     - `query` (булев): Флаг, если нужно выполнить запрос.
     - `id` (строка): Дополнительный идентификатор, если требуется.
     - `forcetmp` (булев): Флаг, если нужно временно сохранить учетные данные.
   - **Возвращаемое значение**: Объект с учетными данными (`username`, `password`), или объект с флагом `rejected`, если учетные данные не найдены.
   - **Пример подключения и использования**:
     ```js
     var popup = require('native/popup');

     popup.getAuthCredentials('myApp', 'Login', true, 'user123', false, function(err, creds) {
       if (err) {
         console.error('Ошибка получения учетных данных:', err);
       } else if (creds.rejected) {
         console.log('Учетные данные отклонены.');
       } else {
         console.log('Полученные учетные данные:', creds.username, creds.password);
       }
     });
     ```

### 3. **`message`**
   - **Описание**: Отображает диалоговое окно с сообщением и кнопками OK/Cancel.
   - **Аргументы**:
     - `message` (строка): Сообщение, которое нужно отобразить.
     - `ok` (булев): Нужно ли отображать кнопку OK.
     - `cancel` (булев): Нужно ли отображать кнопку Cancel.
   - **Возвращаемое значение**: Возвращает `true`, если пользователь нажал OK, и `false`, если Cancel.
   - **Пример подключения и использования**:
     ```js
     var popup = require('native/popup');

     popup.message('Хотите продолжить?', true, true, function(result) {
       if (result) {
         console.log('Пользователь нажал OK');
       } else {
         console.log('Пользователь нажал Cancel');
       }
     });
     ```

### 4. **`textDialog`**
   - **Описание**: Открывает диалоговое окно с полем для ввода текста и кнопками OK/Cancel.
   - **Аргументы**:
     - `message` (строка): Сообщение, которое будет отображено в диалоговом окне.
     - `ok` (булев): Нужно ли отображать кнопку OK.
     - `cancel` (булев): Нужно ли отображать кнопку Cancel.
   - **Возвращаемое значение**: Объект с полем `input` (введенный текст), или флагом `rejected`, если пользователь отклонил диалог.
   - **Пример подключения и использования**:
     ```js
     var popup = require('native/popup');

     popup.textDialog('Введите свой комментарий:', true, true, function(err, result) {
       if (err) {
         console.error('Ошибка при открытии текстового диалога:', err);
       } else if (result.rejected) {
         console.log('Пользователь отклонил ввод.');
       } else {
         console.log('Введенный текст:', result.input);
       }
     });
     ```

### 5. **`notify`**
   - **Описание**: Отправляет уведомление с текстом и иконкой.
   - **Аргументы**:
     - `text` (строка): Текст уведомления.
     - `delay` (число): Задержка перед закрытием уведомления (в миллисекундах).
     - `icon` (строка): Иконка для уведомления.
   - **Пример подключения и использования**:
     ```js
     var popup = require('native/popup');

     popup.notify('Новое уведомление!', 5000, 'info_icon.png');
     ```

---
